#!/usr/bin/perl
use strict;
use warnings;
use feature qw(say);

use IO::File;

my $current_stack;

sub push_stack
{
    push @{$current_stack}, shift;
}

sub pop_stack
{
    die "stack exhausted\n" unless @{$current_stack};
    return pop @{$current_stack};
}

my $ops = {
    '+' => sub { pop_stack() + pop_stack() },
    '-' => sub { pop_stack() - pop_stack() },
    '*' => sub { pop_stack() * pop_stack() },
    '/' => sub { pop_stack() / pop_stack() },
};

sub process_token
{
    my $token = shift;
    if (exists $ops->{$token}) {
	push_stack $ops->{$token}->();
    }
    else {
	push_stack $token;
    }
}

sub execute
{
    my $tokens = shift;

    process_token $_ foreach split /\s+/, $tokens;
    return pop_stack;
}

sub repl
{
    my $fh = shift;
    
    say execute $_ foreach <$fh>;
}

# only start repl if started as a script
repl( bless(\*STDIN => 'IO::File') ) unless defined caller() and caller ne 'PAR';

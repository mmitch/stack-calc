#!/usr/bin/perl
use strict;
use warnings;

# Copyright (C) 2017  Christian Garbs <mitch@cgarbs.de>
# Licensed under GNU GPL v2 or later.

use v5.10;

use Clone qw(clone);
use IO::File;

my ($current_stack, @stack_stack);
my ($ops, $groups);

sub init_stack
{
    my $type = shift // 'STACK';
    
    $current_stack = {
	TYPE  => $type,
	STACK => [],
    }
}

sub init_stacks
{
    @stack_stack   = ();
    init_stack;
}

sub stack_length
{
    return @{$current_stack->{STACK}};
}

sub stack_exec
{
    return $current_stack->{TYPE} ne 'BLOCK';
}

sub stack_empty
{
    return stack_length == 0;
}

sub push_stack
{
    push @{$current_stack->{STACK}}, shift;
}

sub pop_stack
{
    die "stack exhausted\n" if stack_empty;
    return pop @{$current_stack->{STACK}};
}

sub peek_stack
{
    return @{$current_stack->{STACK}}[-1];
}

sub shift_stack
{
    my $count = shift;

    die "stack exhausted\n" if stack_length() < $count;
    shift @{$current_stack->{STACK}} for (1 .. $count);
}

sub push_stack_stack
{
    push @stack_stack, $current_stack;
}

sub pop_stack_stack
{
    die "stack_stack exhausted\n" unless @stack_stack;
    $current_stack = pop @stack_stack;
}

sub inner_op2
{
    my ($op, $arg1, $arg2) = @_;

    if (ref $arg1 eq 'HASH') {
	$arg1 = clone $arg1;
	foreach my $elem (@{$arg1->{STACK}}) {
	    $elem = inner_op2( $op, $elem, $arg2 );
	}
	return $arg1;
    }
    elsif (ref $arg2 eq 'HASH') {
	$arg2 = clone $arg2;
	foreach my $elem (@{$arg2->{STACK}}) {
	    $elem = inner_op2( $op, $arg1, $elem );
	}
	return $arg2;
    }
    else {
	return $op->( $arg1, $arg2 );
    }
}

sub do_op2
{
    my $op = shift;
    my ($arg1, $arg2) = (pop_stack(), pop_stack());

    my $result = inner_op2 $op, $arg1, $arg2;

    push_stack $result ;
}

sub do_repeat
{
    my $repeat_op = shift;

    process_token( $repeat_op ) while stack_length > 1;
}

$ops = {
    '+'  => sub { do_op2( sub { $_[0] + $_[1] } ) }, # addition
    '-'  => sub { do_op2( sub { $_[0] - $_[1] } ) }, # subtraction
    '*'  => sub { do_op2( sub { $_[0] * $_[1] } ) }, # multiplication
    '/'  => sub { do_op2( sub { $_[0] / $_[1] } ) }, # division

    '!+' => sub { do_repeat('+') },    # repeated addition
    '!-' => sub { do_repeat('-') },    # repeated subtraction
    '!*' => sub { do_repeat('*') },    # repeated multiplication
    '!/' => sub { do_repeat('/') },    # repeated division
    
    'd' => sub {                       # drop from beginning of stack
	my $count = pop_stack;
	shift_stack $count;
    },

    'di' => sub {                      # drop indirectly
	my $count = pop_stack;
	my $peek = peek_stack;
	die "di target is plain token" unless ref $peek eq 'HASH';
	push_stack_stack;
	$current_stack = $peek;
	shift_stack $count;
	pop_stack_stack;
    },

    'seq' => sub {                     # generate sequence
	my $max = pop_stack;
	push_stack $_ for 1 .. $max;
    },
};

$groups = {
    '('  => sub {                      # start substack
	push_stack_stack;
	init_stack;
    },
    ')'  => sub {                      # end substack, return top element
	my $ret = pop_stack;
	pop_stack_stack;
	push_stack $ret;
    },

    '['  => sub {                      # start list
	push_stack_stack;
	init_stack 'LIST';
    },
    ']'  => sub {                      # end list, push list to stack
	my $list = $current_stack;
	pop_stack_stack;
	push_stack $list;
    },

    '{'  => sub {                      # start block
	push_stack_stack;
	init_stack 'BLOCK';
    },
    '}'  => sub {                      # end block, push block to stack
	my $block = $current_stack;
	pop_stack_stack;
	push_stack $block;
    },
};

sub process_token
{
    my $token = shift;

    if (exists $groups->{$token}) {
	$groups->{$token}->();
	return;
    }

    if (stack_exec) {
	if (exists $ops->{$token}) {
	    $ops->{$token}->();
	    return;
	}
    }
    
    push_stack $token;
}

sub for_print
{
    my $token = shift;

    if (ref $token eq 'HASH') {
	if ($token->{TYPE} eq 'LIST') {
	    return join ' ', ('[', map { for_print($_) } @{$token->{STACK}}, ']');
	}
	else {
	    return join ' ', (map { for_print($_) } @{$token->{STACK}});
	}
    }
    else
    {
	return $token;
    }
}

sub execute
{
    my $tokens = shift;

    init_stacks;
    process_token $_ foreach split /\s+/, $tokens;
    return for_print pop_stack;
}

sub repl
{
    my $fh = shift;
    
    say execute $_ while ( defined( $_ = $fh->getline) );
}

# only start repl if started as a script
repl( bless(\*STDIN => 'IO::File') ) unless defined caller() and caller ne 'PAR';
